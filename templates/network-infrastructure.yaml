AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  This stack either:
  1 - creates all networking related components for the project (CreateNetworkInfrastructure=TRUE)
  or
  2 - it simply adds the user-supplied subnets to the SSM parameter store to be used downstream
    *NOTE*: If you choose this option (CreateNetworkInfrastructure=FALSE), it is assumed that all networking related
    resources will be handled external to this installation

Parameters:
  ParentStack:
    Type: String
    Description: Parent stack this template was launched from, used for naming SSM parameters

  UseCase:
    Type: String
    AllowedPattern: "[a-z_]+"

  CreateNetworkInfrastructure:
    Type: String
    AllowedValues: [ 'TRUE', 'FALSE' ]
    Default: 'FALSE'

  VpcCidrBlock:
    Type: String
    Default: '10.0.0.0/16'
    Description: CIDR Block for the new VPC.

  VpcSubnetIds:
    Type: CommaDelimitedList
    Default: ""
    Description: >
      Comma deliminted list of two existing private subnets you want this infrastructure to run in.
      Leave as NONE to have this stack create them.

  VpcSubnetIpBlocks:
    Type: CommaDelimitedList
    Default:  ""
    Description: Comma deliminted list of four Cidr ranges. Only relevant if VpcSubnetIds is set to CREATE

Conditions:
  CreateNetworkInfrastructure: !Equals [ !Ref CreateNetworkInfrastructure, 'TRUE' ]


Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Condition: CreateNetworkInfrastructure
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: "Application"
          Value: !Ref ParentStack
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: !Sub 'vpc-${UseCase}'

  PrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    Condition: CreateNetworkInfrastructure
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [ 0, !Ref VpcSubnetIpBlocks ]
      Tags:
        - Key: "Application"
          Value: !Ref ParentStack
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: !Sub 'subnet-private-${UseCase}-${AWS::Region}a'

  PrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    Condition: CreateNetworkInfrastructure
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [ 1, !Ref VpcSubnetIpBlocks ]
      Tags:
        - Key: "Application"
          Value: !Ref ParentStack
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: !Sub 'subnet-private-${UseCase}-${AWS::Region}b'

  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Condition: CreateNetworkInfrastructure
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: !Select [ 2, !Ref VpcSubnetIpBlocks ]
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: "Application"
          Value: !Ref ParentStack
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Sub 'subnet-public-${UseCase}-${AWS::Region}a'

  PublicSubnetB:
    Type: "AWS::EC2::Subnet"
    Condition: CreateNetworkInfrastructure
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: !Select [ 3, !Ref VpcSubnetIpBlocks ]
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: "Application"
          Value: !Ref ParentStack
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Sub 'subnet-public-${UseCase}-${AWS::Region}b'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Condition: CreateNetworkInfrastructure
    Properties:
      Tags:
        - Key: "Application"
          Value: !Ref ParentStack
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: !Sub 'igw-${UseCase}'

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Condition: CreateNetworkInfrastructure
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Condition: CreateNetworkInfrastructure
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Application"
          Value: !Ref ParentStack
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Sub 'route-table-public-${UseCase}'

  PublicRoute:
    Type: "AWS::EC2::Route"
    Condition: CreateNetworkInfrastructure
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: CreateNetworkInfrastructure
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: CreateNetworkInfrastructure
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Condition: CreateNetworkInfrastructure
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Application"
          Value: !Ref ParentStack
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value: !Sub 'nacl-public-${UseCase}'

  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: CreateNetworkInfrastructure
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: CreateNetworkInfrastructure
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  PublicSubnetNetworkAclAssociationA:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Condition: CreateNetworkInfrastructure
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociationB:
    Condition: CreateNetworkInfrastructure
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PublicSubnetB
      NetworkAclId: !Ref PublicNetworkAcl

  ElasticIPA:
    Type: "AWS::EC2::EIP"
    Condition: CreateNetworkInfrastructure
    Properties:
      Domain: "vpc"

  ElasticIPB:
    Type: "AWS::EC2::EIP"
    Condition: CreateNetworkInfrastructure
    Properties:
      Domain: "vpc"

  NATGatewayA:
    Type: "AWS::EC2::NatGateway"
    Condition: CreateNetworkInfrastructure
    Properties:
      AllocationId: !GetAtt ElasticIPA.AllocationId
      SubnetId: !Ref PublicSubnetA

  NATGatewayB:
    Type: "AWS::EC2::NatGateway"
    Condition: CreateNetworkInfrastructure
    Properties:
      AllocationId: !GetAtt ElasticIPB.AllocationId
      SubnetId: !Ref PublicSubnetB

  PrivateRouteTableA:
    Type: "AWS::EC2::RouteTable"
    Condition: CreateNetworkInfrastructure
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub 'route-table-private-a-${UseCase}'

  PrivateRouteTableB:
    Type: "AWS::EC2::RouteTable"
    Condition: CreateNetworkInfrastructure
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub 'route-table-private-b-${UseCase}'

  PrivateRouteToInternetA:
    Type: "AWS::EC2::Route"
    Condition: CreateNetworkInfrastructure
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGatewayA

  PrivateRouteToInternetB:
    Type: "AWS::EC2::Route"
    Condition: CreateNetworkInfrastructure
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGatewayB

  PrivateSubnetRouteTableAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: CreateNetworkInfrastructure
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnetRouteTableAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: CreateNetworkInfrastructure
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

  DataLakeEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateNetworkInfrastructure
    Properties:
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTableA
        - !Ref PrivateRouteTableB
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

  DynamoDbEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateNetworkInfrastructure
    Properties:
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTableA
        - !Ref PrivateRouteTableB
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

  VpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateNetworkInfrastructure
    Properties:
      GroupDescription: Allow incoming requests from private subnets
      GroupName: "Internal VPC Endpoints"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"
          Description: "Allow outbound"
      SecurityGroupIngress:
        - CidrIp: !Select [ 0, !Ref VpcSubnetIpBlocks ]
          IpProtocol: -1
          Description: "Allow inbound from private subnet a"
        - CidrIp: !Select [ 1, !Ref VpcSubnetIpBlocks ]
          IpProtocol: -1
          Description: "Allow inbound from private subnet b"
      VpcId: !Ref VPC

  GlueEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateNetworkInfrastructure
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.glue'
      SecurityGroupIds: [ !Ref VpcEndpointSecurityGroup ]
      VpcEndpointType: Interface
      PrivateDnsEnabled: TRUE
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      VpcId: !Ref VPC

  LakeFormationEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateNetworkInfrastructure
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.lakeformation'
      SecurityGroupIds: [ !Ref VpcEndpointSecurityGroup ]
      VpcEndpointType: Interface
      PrivateDnsEnabled: TRUE
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      VpcId: !Ref VPC

  SecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateNetworkInfrastructure
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      SecurityGroupIds: [ !Ref VpcEndpointSecurityGroup ]
      VpcEndpointType: Interface
      PrivateDnsEnabled: TRUE
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      VpcId: !Ref VPC

  StepFunctionsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateNetworkInfrastructure
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.states'
      SecurityGroupIds: [ !Ref VpcEndpointSecurityGroup ]
      VpcEndpointType: Interface
      PrivateDnsEnabled: TRUE
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      VpcId: !Ref VPC

  DmsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateNetworkInfrastructure
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dms'
      SecurityGroupIds: [ !Ref VpcEndpointSecurityGroup ]
      VpcEndpointType: Interface
      PrivateDnsEnabled: TRUE
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      VpcId: !Ref VPC

  RdbmsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateNetworkInfrastructure
    Properties:
      GroupDescription: Allow connections to postgres from private subnets. Manually attach to source RDS Instance.
      GroupName: "Internal Postgres"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"
          Description: "Allow outbound"
      SecurityGroupIngress:
        - CidrIp: !Select [ 0, !Ref VpcSubnetIpBlocks ]
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp
        - CidrIp: !Select [ 1, !Ref VpcSubnetIpBlocks ]
          FromPort: 5432
          ToPort: 5432
          IpProtocol: tcp
      VpcId: !Ref VPC

  VpcIdParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateNetworkInfrastructure
    Properties:
      Description: Runtime VPC ID
      Name: !Sub '/${ParentStack}/network/vpc/id'
      Type: String
      Value: !Ref VPC

  VpcDefaultSgParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateNetworkInfrastructure
    Properties:
      Description: Runtime VPC ID
      Name: !Sub '/${ParentStack}/network/vpc/defaultsg'
      Type: String
      Value: !GetAtt VPC.DefaultSecurityGroup

  SubnetIdAParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Runtime Subnet A
      Name: !Sub '/${ParentStack}/network/subnet/a/id'
      Type: String
      Value: !If [ CreateNetworkInfrastructure, !Ref PrivateSubnetA, !Select [ 0, !Ref VpcSubnetIds ] ]

  SubnetIdBParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Runtime Subnet B
      Name: !Sub '/${ParentStack}/network/subnet/b/id'
      Type: String
      Value: !If [ CreateNetworkInfrastructure, !Ref PrivateSubnetB, !Select [ 1, !Ref VpcSubnetIds ] ]

  DataLakeEndpointParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateNetworkInfrastructure
    Properties:
      Description: DataLake S3 VPC Endpoint ID
      Name: !Sub '/${ParentStack}/network/vpce/datalake/id'
      Type: String
      Value: !Ref DataLakeEndpoint
